#!/usr/bin/perl

# PODNAME: gelf-broker

use strictures 2;

# ABSTRACT: listen on an unix domain socket and forward messages to graylog

use bytes;
use boolean;

use IO::Async::Loop;
use IO::Async::Listener;
use IO::Async::Socket;
use IO::Async::Signal;
use IO::Async::Timer::Periodic;
use IO::Async::File;
use IO::Async::SSL;
use IO::Socket;
use IO::Socket::SSL;

use Fcntl qw(LOCK_EX LOCK_NB O_CREAT O_EXCL O_WRONLY);

use YAML;
use JSON qw(from_json to_json);
use FindBin qw($RealBin $RealScript);
use Regexp::Common qw(net);
use Getopt::Long;
use Pod::Usage;
use Log::GelfSocket ();
use Scalar::Util qw(weaken);
use Class::Load qw(try_load_class);
use File::Slurp qw(write_file);

use Log::Any '$log', filter => \&logfilter;
use Log::Any::Adapter;

use Time::Monotonic;
use Data::Dumper;
use Try::Tiny;

use constant STATUS_UNKNOWN     => 0;
use constant STATUS_CONNECTING  => 1;
use constant STATUS_CONNECTED   => 2;
use constant STATUS_ERROR       => 3;
use constant STATUS_SHUTDOWN    => 4;

use constant PROTO_TCP =>  6;
use constant PROTO_UDP => 17;

use constant NUL => "\x00";
use constant EOL => "\r\n";

use constant LOGLEVELS => [qw[ fatal alert critical error warning notice info debug trace ]];

our $T0;

BEGIN {
    $| = 1;
    $SIG{$_} = 'IGNORE' foreach grep !/^(HUP|INT|TERM|QUIT|USR1|USR2|PIPE)$/, keys %SIG;
    $T0 = Time::Monotonic->new;
}

sub dumper
{
    return Data::Dumper->new(\@_)->Purity(1)->Terse(1)->Dump;
}

sub logfilter
{
    my ($category, $level, $message) = @_;
    return sprintf('%s UTC [broker:%s] %8s: %s', scalar(gmtime time), $category, LOGLEVELS->[$level], $message);
}

sub striperr (_) ## no critic
{
    my $e = shift || $@ || return;
    $e =~ s{ \s+ at \s+ (?<file> \S+ ) \s+ line \s+ (?<line> \S+ ) \s* $}{}xsir;
}

sub throw
{
    my ($msg, @args) = @_;
    die sprintf($msg.EOL, @args);
}

my @END;

END {
    while (my $sub = pop @END) {
        eval { $sub->() };
        warn $@ if $@;
    }
}

sub end (&) ## no critic
{
    push @END => @_;
}

my $config = {
    pidfile => '/var/run/gelf/broker.pid',
};

################################################################################

# VERSION

if ($main::VERSION and $Log::GelfSocket::VERSION) {
    if ($main::VERSION ne $Log::GelfSocket::VERSION) {
        printf "This version (v%s) is incompatible with its own library (v%s)\n", $main::VERSION, $Log::GelfSocket::VERSION;
        exit 2;
    }
}

our $RealPath = $RealBin . '/' . $RealScript;

################################################################################

=head1 SYNOPSIS

gelf-broker --help

gelf-broker [options]

=head1 OPTIONS

=over 4

=cut

my @GetOpts;

########################################

=item B<--help>

Z<>

=cut

my $help = 0;
push @GetOpts => (
    'help' => \$help
);

########################################

=item B<--version>

Z<>

=cut

my $print_version;
push @GetOpts => (
    'version' => \$print_version
);

########################################

=item B<--setup-ubic>

Z<>

=cut

my $setup_ubic;
push @GetOpts => (
    'setup-ubic' => \$setup_ubic
);

########################################

=item B<--log> <level>

Log all I<internal> messages to stderr

=cut

my $logstderr = undef;
push @GetOpts => (
    'log=s'=> \$logstderr
);

########################################

=item B<--fake>

Do not connect to any graylog server, but print all received GELF messages to stdout

=cut

my $fake = false;
push @GetOpts => (
    'fake'=> \$fake
);

########################################

=item B<--listen> <unix domain socket>

The GELF socket we should listen on.

Defaults to I</var/run/gelf/broker.sock>.

=cut

$config->{socket} = '/var/run/gelf/broker.sock';
push @GetOpts => (
    'listen=s'=> \$config->{socket}
);

########################################

=item B<--graylog> <graylog tcp server>

The Graylog TCP socket we should connect to.

Defaults to I<localhost:12222>.

=cut

$config->{graylog} = 'localhost:12222';
push @GetOpts => (
    'socket=s'=> \$config->{graylog}
);

########################################

=item B<--config> <path to config file>

Defaults to I</etc/gelf/broker.yml>.

=cut

my $configfile = '/etc/gelf/broker.yml';
push @GetOpts => (
    'config=s'=> \$configfile
);

########################################

=back

=cut

GetOptions(@GetOpts) or pod2usage(2);

if ($help) {
    pod2usage(1);
    exit 1;
}

if ($setup_ubic) {
    unless (try_load_class('Ubic::Settings')) {
        die "Ubic seams not to be installed yet\n";
    }
    my $service_base_dir = Ubic::Settings->service_dir;
    my $data_base_dir = Ubic::Settings->data_dir;
    unless (defined $service_base_dir and -d $service_base_dir) {
        die "Ubic seams not to be fully configured yet\n";
    }
    my $service_gelf_dir = $service_base_dir . '/gelf';
    unless (-d $service_gelf_dir) {
        unless (mkdir $service_gelf_dir) {
            die "Cannot create directory $service_gelf_dir: $!\n";
        }
    }
    my $service_gelf_file = $service_gelf_dir . '/broker';
    if (-e $service_gelf_file) {
        die "File $service_gelf_file already exists\n";
    }
    my @argv = ($RealPath);
    if (defined $configfile) {
        push @argv => ('--config', $configfile);
    }
    if (defined $logstderr) {
        push @argv => ('--log', $logstderr);
    }
    my $ubic_config_template = 'use Ubic::Service::SimpleDaemon;Ubic::Service::SimpleDaemon->new(bin=>%s,stdout=>%s,stderr=>%s,ubic_log=>%s,);';
    write_file(
        $service_gelf_file,
        sprintf(
            $ubic_config_template,
            dumper(\@argv),
            dumper($data_base_dir.'/gelf-broker.out'),
            dumper($data_base_dir.'/gelf-broker.err'),
            dumper($data_base_dir.'/gelf-broker.log'),
        )
    );
    print "Ubic service gelf.broker created\n";
    exit 0;
}

my $myversion = $main::VERSION ? "This is $RealScript, version $main::VERSION" : "This is $0, an unreleased development version";

if ($print_version) {
    print "$myversion\n";
    exit 0;
}

########################################

if ($logstderr) {
    Log::Any::Adapter->set('Stderr', log_level => $logstderr);
}

$log->info($myversion);

my $loop = IO::Async::Loop->new;

$log->debugf('loaded %s', ref($loop));

my $listener_handle;
my $listener_signature;

my $graylogger_handle;
my $graylogger_status = STATUS_UNKNOWN;

my $shutdown = false;

my @buffer;

my %performance;

end {
    $log->info('exit');
};

sub selflog
{
    my ($level, $message, %extra) = @_;
    $extra{facility} = 'gelf-broker';
    $extra{pid} = $$;
    my %gelf = Log::GelfSocket->_prepare($level, $message, %extra);
    my $json = to_json(\%gelf);
    unshift @buffer => $json;
    return;
}

sub init_performance
{
    my $id = shift;
    $performance{$id} = {
        count => 0,
        bytes => 0,
        timer => Time::Monotonic->new,
    };
}

sub push_performance
{
    my $id = shift;
    my $bytes = shift;
    $performance{$id}->{count}++;
    $performance{$id}->{bytes} += $bytes;
}

sub get_performance {
    my $id = shift;
    my %perf = (
        count => $performance{$id}->{count},
        bytes => $performance{$id}->{bytes},
        timer => $performance{$id}->{timer}->now,
    );
    init_performance($id);
    return %perf;
}

sub test_unix_socket
{
    my $file = shift || return;
    my $socket = IO::Socket::UNIX->new(
        Type => SOCK_DGRAM,
        Peer => $file,
    );
    if ($socket) {
        $socket->close;
        undef $socket;
        return true;
    } else {
        $log->debugf('socket test failed: cannot connect to unix domain socket %s: %s', $file, $!);
        return false;
    }
}

sub human_bytes {
    my $b = int shift;
    if ($b > 1_000_000_000) {
        return sprintf('%0.03f GB', $b / 1_000_000_000);
    } elsif ($b > 1_000_000) {
        return sprintf('%0.03f MB', $b / 1_000_000);
    } elsif ($b > 1_000) {
        return sprintf('%0.03f KB', $b / 1_000);
    } else {
        return "$b B";
    }
}

sub json_prettyreformat
{
    return to_json(from_json(shift), { pretty => 1, canonical => 1 });
}

sub file_signature
{
    my $file = shift || return;
    my @stat = stat $file;
    unless (@stat) {
        $log->noticef('cannot stat file %s: %s', $file, $!);
        return;
    }
    use Config;
    if ($Config{intsize} == 2) {
        return pack(LL => @stat[0..1]);
    }
    if ($Config{intsize} == 4) {
        return pack(QQ => @stat[0..1]);
    }
    throw('bad intsize: %d', $Config{intsize});
}

sub read_config
{
    my $init = boolean(shift) || false;

    return if $shutdown;

    try {
        my $old = $config;
        my $new = YAML::LoadFile($configfile);

        unless (ref $new eq 'HASH') {
            throw('inproper format, expected key-value pairs');
        }

        unless (exists $new->{graylog}) {
            throw('inproper format, "graylog" param not found');
        }

        unless (exists $new->{socket}) {
            throw('inproper format, "socket" param not found');
        }

        unless ($init) {
            unless ($old->{graylog} eq $new->{graylog}) {
                $log->infof('new graylog endpoint: %s', $new->{graylog});
                if ($graylogger_handle) {
                    $log->debug('close graylog handle when buffer empty');
                    $graylogger_status = STATUS_SHUTDOWN;
                    $graylogger_handle->close_when_empty;
                }
            }
            unless ($old->{socket} eq $new->{socket}) {
                $log->infof('new listener socket: %s', $new->{socket});
                if ($listener_handle) {
                    $log->debug('close listener handle');
                    $listener_handle->close;
                    undef $listener_handle;
                    unlink $old->{socket};
                    bind_listener();
                }
            }
        }

        $config = $new;

        return true;
    } catch {
        $log->errorf('cannot load config file %s: %s', $configfile, striperr());
        return false;
    };
}

sub read_buffer
{
    my $file = $config->{buffer} || return;
    if (open (my $fh, '<', $file)) {
        unless (flock($fh, LOCK_EX | LOCK_NB)) {
            $log->warnf('cannot obtain exclusive lock for file %s: %s', $file, $!);
            close $fh;
            return false;
        }
        my $i;
        if (read($fh, my $lenb, 4) == 4) {
            $i = unpack(N => $lenb);
        } else {
            $log->warnf('cannot read header from file %s: %s', $file, $!);
            close $fh;
            return false;
        }
        while ($i > 0 and read($fh, my $lenb, 2) == 2) {
            my $length = unpack(n => $lenb);
            if (read ($fh, my $line, $length) == $length) {
                push @buffer => $line;
                $i--;
            } else {
                $log->warnf('cannot read %d bytes from file %s: %s', $length, $file, $!);
                close $fh;
                return false;
            }
        }
        if ($i > 0) {
            $log->warnf('%d messages left in buffer cache', $i);
        }
        close $fh;
        return true;
    } else {
        $log->warnf('cannot open file %s for reading: %s', $file, $!);
        return false;
    }
}

sub write_buffer
{
    my $file = $config->{buffer} || return;
    if (open (my $fh, '>', $file)) {
        unless (flock($fh, LOCK_EX | LOCK_NB)) {
            $log->warnf('cannot obtain exclusive lock for file %s: %s', $file, $!);
            close $fh;
            return false;
        }
        print $fh pack(N => scalar(@buffer));
        my $i = 0;
        foreach my $line (@buffer) {
            print $fh pack(n => length $line);
            print $fh $line;
            $i++;
        }
        close $fh;
        if ($i > 0) {
            $log->infof('stored %d messages in cache', $i);
        }
        return true;
    } else {
        $log->warnf('cannot open file %s for writing: %s', $file, $!);
        return false;
    }
}

sub bind_listener
{
    return if $shutdown;
    my $file = $config->{socket};
    if (-e $file) {
        $log->noticef('listener socket file %s already exists', $file);
        if (-S $file) {
            if (test_unix_socket($file)) {
                $log->fatalf('there is already an active listener socket at %s', $file);
                &shutdown();
            }
        }
        unless (unlink $file) {
            $log->errorf('cannot unlink listener socket %s: %s', $file, $!);
            return false;
        }
    }
    if ($listener_handle) {
        $log->notice('a listener handle is still active, closing');
        $listener_handle->close;
        undef $listener_handle;
    }
    my $socket = IO::Socket::UNIX->new(
        Type    => SOCK_DGRAM,
        Listen  => SOMAXCONN,
        Local   => $file,
    );
    if ($socket) {
        if ($config->{perms}) {
            my $perms = oct($config->{perms}) & oct('0777');
            if (chmod($perms, $file)) {
                $log->debugf('file permissions of listener socket file %s changed to 0%o', $file, $perms);
            } else {
                $log->errorf('cannot change permissions of listener socket file %s to 0%o: %s', $file, $perms, $!);
                $socket->close;
                return false;
            }
        }
        $listener_signature = file_signature($file);
        $listener_handle = IO::Async::Socket->new(
            read_handle     => $socket,
            on_closed       => sub {
                $log->debug('listener handle closed');
                undef $listener_handle;
            },
            on_recv         => \&read_message,
            on_recv_error   => sub {
                $log->warnf('read error on listener socket file %s: %s', $file, $1);
            },
        );
        $loop->add($listener_handle);
        $log->infof('now listening on socket file %s', $file);
    } else {
        $log->errorf('cannot listen on socket file %s: %s', $file, $!);
        return false;
    }
}

sub check_listener
{
    my $file = $config->{socket};

    unless (-e $file) {
        $log->warnf('listener socket file %s disappeared', $file);
        return false;
    }

    unless (-S $file) {
        $log->warnf('listener socket file %s is no longer a unix domain socket', $file);
        return false;
    }

    unless ($listener_signature eq file_signature($file)) {
        $log->warnf('listener socket file signature of %s changed', $file);
        return false;
    }

    unless (test_unix_socket($file)) {
        $log->warnf('listener socket self-test connection to %s failed', $file);
        return false;
    }

    return true;
}

sub write_status_file
{
    my $file = $config->{status} || return;

    if (sysopen(my $lockfh, "$file~", O_CREAT | O_WRONLY)) {
        if (flock ($lockfh, LOCK_EX | LOCK_NB)) {
            local $| = 1;
            syswrite($lockfh, $$);

            YAML::DumpFile($file, {
                pid     => $$,
                buffer  => scalar(@buffer),
                started => $^T,
                uptime  => $T0->now,
                listener => {
                    socket  => $config->{socket},
                    signature => ($listener_signature ? unpack('h*' => $listener_signature) : undef),
                },
                socket  => $config->{socket},
                graylog => {
                    status  => $graylogger_status,
                    hostport => $config->{graylog},
                },
            });
            $log->debugf('current status written to file %s', $file);

            close $lockfh;
            unless (unlink "$file~") {
                $log->warnf('cannot unlink lockfile %s~: %s', $file, $!);
            }
        } else {
            $log->errorf('cannot obtain lock on lockfile %s~: %s', $file, $1);
        }
    } else {
        $log->errorf('cannot create lockfile %s~: %s', $file, $!);
    }
}

init_performance('read');

sub read_message
{
    my ($socket, $message, $address) = @_;
    my $bytes = length $message;
    push_performance(read => $bytes);
    if ($bytes > 1) {
        if ($fake) {
            printf STDOUT "%s\n", json_prettyreformat($message);
        } else {
            unless (send_message($message)) {
                push @buffer => $message;
            }
        }
    }
}

sub split_hostport
{
    my ($hostport, $default_port) = @_;
    $default_port ||= 12222;
    my $IPv4 = $RE{net}{IPv4};
    my $IPv6 = $RE{net}{IPv6};
    my $FQDN = $RE{net}{domain};
    if ($hostport =~ m{^ (?<Host> (?<IPv4> $IPv4 ) | \[ (?<IPv6> $IPv6 ) \] | (?<FQDN> $FQDN ) ) : (?<Port> \d+ ) $}x) {
        if ($+{IPv4}) {
            return ('inet',  $+{IPv4}, int $+{Port});
        }
        if ($+{IPv6}) {
            return ('inet6', $+{IPv6}, int $+{Port});
        }
        if ($+{FQDN}) {
            return (undef,   $+{FQDN}, int $+{Port});
        }
    } elsif ($hostport =~ m{^ (?<IPv4> $IPv4 ) | (?<IPv6> $IPv6 ) | (?<FQDN> $FQDN ) $}x) {
        if ($+{IPv4}) {
            return ('inet',  $+{IPv4}, $default_port);
        }
        if ($+{IPv6}) {
            return ('inet6', $+{IPv6}, $default_port);
        }
        if ($+{FQDN}) {
            return (undef,   $+{FQDN}, $default_port);
        }
    }
    return;
}

sub connect_graylogger
{
    return if $shutdown;
    undef $graylogger_handle;
    $graylogger_status = STATUS_CONNECTING;

    my ($family, $host, $port) = split_hostport($config->{graylog});

    unless ($host and $port) {
        $log->errorf('bad hostname/port: %s', $config->{graylog});
        return;
    }

    my %extras;

    my $ssl = $config->{ssl};
    if (ref $ssl eq 'HASH') {
        foreach my $key (keys %$ssl) {
            if (defined $ssl->{$key}) {
                $extras{"SSL_$key"} = $ssl->{$key};
            }
        }
        delete $extras{"SSL_$_"} foreach (qw(
            server
            startHandshake
            ca
            client_ca
            cert_file
            cert
            key_file
            key
            password_cb
            use_cert
            dh
            verify_mode
            verify_callback
            reuse_ctx
            ocsp_staple_callback
            create_ctx_callback
            session_cache_size
            session_cache
            session_key
            error_trap
            npn_protocols
            alpn_protocols
            ticket_keycb 
        ));
        $extras{SSL_verify_mode} = SSL_VERIFY_PEER;
    } else {
        $ssl = false;
    }

    $loop->connect(
        %extras,
        extensions  => [ $ssl ? 'SSL' : () ],
        family      => $family,
        host        => $host,
        service     => $port,
        socktype    => 'stream',
        protocol    => PROTO_TCP,
        on_stream   => sub
        {
            my ($handle) = @_;
            $log->infof('connected to graylog host %s at port %d', $host, $port);
            $graylogger_handle = $handle;
            configure_graylogger();
            selflog('info', 'connected to graylog');
        },
        on_connect_error => sub
        {
            my ($syscall, $error) = @_;
            undef $graylogger_handle;
            $log->errorf('graylog connection to host %s at port %d failed - %s reported: %s', $host, $port, $syscall, $error);
            $graylogger_status = STATUS_ERROR;
        },
        on_resolve_error => sub
        {
            my ($error) = @_;
            undef $graylogger_handle;
            $log->errorf('cannot resolve graylog hostname %s', $host);
            $graylogger_status = STATUS_ERROR;
        },
        on_ssl_error => sub
        {
            my ($error) = @_;
            undef $graylogger_handle;
            $log->errorf('graylog SSL error: %s', $error);
            $graylogger_status = STATUS_ERROR;
        },
    );
    $graylogger_handle = false;
}

sub configure_graylogger
{
    return unless $graylogger_handle;
    $graylogger_handle->configure(
        autoflush       => true,
        want_readready  => true,
        want_writeready => true,
        on_read         => sub
        {
            $log->notice('received packet of data from graylog - this is not usual and everything will be ignored (is this really a graylog endpoint?)');
            return 0;
        },
        on_closed => sub
        {
            $log->debug('graylog disconnected');
            undef $graylogger_handle;
            $graylogger_status = STATUS_UNKNOWN;
        },
        on_read_eof => sub
        {
            $log->warn('graylog reader reached end of transmission');
            if (defined $graylogger_handle) {
                $graylogger_handle->close_now;
                $graylogger_status = STATUS_ERROR;
            }
        },
        on_write_eof => sub
        {
            $log->warn('graylog writer reached end of transmission');
            $graylogger_status = STATUS_ERROR;
            if (defined $graylogger_handle) {
                $graylogger_handle->close_now;
            }
        },
        on_read_error => sub
        {
            my $error = pop;
            $log->errorf('cannot read data from graylog: %s', $error);
            $graylogger_status = STATUS_ERROR;
            if (defined $graylogger_handle) {
                $graylogger_handle->close_now;
            }
        },
        on_write_error => sub
        {
            my $error = pop;
            $log->errorf('cannot write data to graylog: %s', $error);
            $graylogger_status = STATUS_ERROR;
            if (defined $graylogger_handle) {
                $graylogger_handle->close_now;
            }
        },
    );
    $graylogger_status = STATUS_CONNECTED;
}

init_performance('sent');

sub send_message
{
    use bytes;
    my $message = shift;
    unless ($graylogger_handle and $graylogger_status == STATUS_CONNECTED) {
        return false;
    }
    $message .= NUL;
    $graylogger_handle->write($message);
    push_performance(sent => length $message);
    return true;
}

sub drain_buffer
{
    unless ($graylogger_status == STATUS_CONNECTED) {
        return;
    }
    while (@buffer) {
        my $message = shift @buffer || next;
        unless (send_message($message)) {
            push @buffer => $message;
            last;
        }
    }
}

sub shutdown
{
    return if $shutdown;
    $shutdown = true;

    selflog(info => 'shutdown graylog connection');

    write_buffer();

    if ($listener_handle) {
        $log->debug('listener handle still active');
        $listener_handle->close;
        unlink $config->{socket};
    }

    if ($graylogger_handle) {
        $log->debug('graylog handle still active');
        drain_buffer();
        $graylogger_handle->close_now;
    }

    $loop->stop;
}

unless (read_config(true)) {
    throw('no configuration found');
}

write_status_file();

my $pidfh;

if (my $pidfile = $config->{pidfile}) {
    if (-e $pidfile) {
        unless (open ($pidfh, '<', $pidfile)) {
            throw('cannot read pidfile %s: %s', $pidfile, $!);
        }
        my $pid = <$pidfh>;
        close $pidfh;
        if ($pid) {
            $pid =~ s{\D}{}sg;
            if (-d "/proc") {
                if (-e "/proc/$pid") {
                    throw('there is already an active process with pid %d as read from pidfile %s', $pid, $pidfile);
                }
            } else {
                if (kill 0 => $pid) {
                    throw('there is already an active process with pid %d as read from pidfile %s', $pid, $pidfile);
                } else {
                    throw('pidfile %s found, checking pid %d reported: %s - please check process and delete pidfile if needed', $pidfile, $pid, $!);
                }
            }
        }
        if (unlink $pidfile) {
            $log->noticef('pidfile %s found and removed', $pidfile);
        } else {
            throw('cannot remove pidfile %s: %s', $pidfile, $!);
        }
    }

    if (sysopen($pidfh, $pidfile, O_CREAT | O_EXCL | O_WRONLY)) {
        if (flock ($pidfh, LOCK_EX | LOCK_NB)) {
            local $| = 1;
            syswrite($pidfh, $$);
            end {
                close $pidfh;
                unless (unlink $pidfile) {
                    $log->warnf('cannot unlink pidfile %s: %s', $pidfile, $!);
                }
            };
        } else {
            throw('cannot obtain lock on pidfile %s: %s', $pidfile, $!);
        }
    } else {
        throw('cannot create pidfile %s: %s', $pidfile, $!);
    }
} else {
    $log->notice('no pidfile defined');
}

$loop->add(IO::Async::Timer::Periodic->new(
    interval        => 10,
    first_interval  => 1,
    reschedule      => 'drift',
    on_tick         => sub
    {
        write_buffer();
        drain_buffer();
        unless ($listener_handle and check_listener()) {
            $log->debug('not listening on any socket file, binding');
            bind_listener();
        }
        if (not $fake and not defined $graylogger_handle) {
            $log->debug('not connected to graylog, connecting');
            connect_graylogger();
        }
        if ($graylogger_handle and $graylogger_status == STATUS_CONNECTED) {
            $log->debug('keep alive graylog connection');
            $graylogger_handle->write('{}'.NUL);
        }
        foreach my $metric (qw( read sent )) {
            my %perf = get_performance($metric);
            next unless $perf{count} and $perf{bytes} and $perf{timer};
            $log->infof(
                '%s %d messages and %sytes in %0.03f seconds, throughput: %d/s and %s/s',
                $metric,
                $perf{count},
                human_bytes($perf{bytes}),
                $perf{timer},
                int($perf{count} / $perf{timer}),
                human_bytes($perf{bytes} / $perf{timer}),
            );
        }

    }
)->start);

if ($fake) {
    $log->notice('fake mode enabled - never connecting to any graylog server');
}

$loop->add(IO::Async::Signal->new(
    name => 'INT',
    on_receipt => sub
    {
        if ($logstderr) {
            local $| = 1;
            print STDERR EOL;
        }
        $log->debug('got INT signal');
        &shutdown();
    }
));

$loop->add(IO::Async::Signal->new(
    name => 'TERM',
    on_receipt => sub
    {
        $log->debug('got TERM signal');
        &shutdown();
    }
));

$loop->add(IO::Async::Signal->new(
    name => 'QUIT',
    on_receipt => sub
    {
        $log->debug('got QUIT signal');
        &shutdown();
    }
));

$loop->add(IO::Async::Signal->new(
    name => 'USR1',
    on_receipt => sub
    {
        $log->debug('got USR1 signal');
        $log->info('reload configuration file');
        read_config(false);
    }
));

$loop->add(IO::Async::Signal->new(
    name => 'USR2',
    on_receipt => sub
    {
        $log->debug('got USR2 signal');
        write_status_file();
    }
));

$loop->add(IO::Async::Signal->new(
    name => 'HUP',
    on_receipt => sub
    {
        $log->debug('got HUP signal');
        if ($graylogger_status == STATUS_CONNECTED) {
            $log->info('restart graylog connetion');
            $graylogger_status = STATUS_SHUTDOWN;
            $graylogger_handle->close_when_empty;
        }
    }
));

read_buffer();
write_buffer();

$log->info('starting');

$loop->run;

$log->info('cleanup');
